using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace SimpleLogger
{
    public static class AdifHelper
    {
        public static void Export(List<QSO> qsos, string filePath)
        {
            var sb = new StringBuilder();

            // Add ADIF Header
            sb.AppendLine("Generated by SimpleLogger");
            sb.AppendLine("<ADIF_VER:5>3.1.4");
            sb.AppendLine("<PROGRAMID:12>SimpleLogger");
            sb.AppendLine("<PROGRAMVERSION:10>SLDT202509");
            sb.AppendLine("<EOH>");
            sb.AppendLine();

            foreach (var qso in qsos)
            {
                sb.Append(GetAdifField("QSO_DATE", qso.Date?.Replace("-", "")));
                sb.Append(GetAdifField("TIME_ON", qso.Time?.Replace(":", "")));
                sb.Append(GetAdifField("CALL", qso.Callsign));
                sb.Append(GetAdifField("NAME", qso.TheirName));

                string band = MapFrequencyToBand(qso.FrequencyBand);
                if (!string.IsNullOrEmpty(band))
                {
                    sb.Append(GetAdifField("BAND", band));
                }
                else
                {
                    // If not a standard band, export as FREQ in MHz
                    if (double.TryParse(qso.FrequencyBand, out double freqMHz))
                    {
                        sb.Append(GetAdifField("FREQ", freqMHz.ToString("0.####")));
                    }
                }

                sb.Append(GetAdifField("MODE", qso.Mode));
                sb.Append(GetAdifField("RST_SENT", qso.RstSent));
                sb.Append(GetAdifField("RST_RCVD", qso.RstReceived));
                sb.Append(GetAdifField("GRIDSQUARE", qso.TheirGrid));
                sb.Append(GetAdifField("QTH", qso.TheirLocation));
                sb.Append(GetAdifField("STATION_CALLSIGN", qso.MyCallsign));
                sb.Append(GetAdifField("MY_GRIDSQUARE", qso.MyGrid));
                sb.Append(GetAdifField("NOTES", qso.Notes));

                sb.AppendLine("<EOR>");
                sb.AppendLine();
            }

            File.WriteAllText(filePath, sb.ToString());
        }

        private static string GetAdifField(string fieldName, string? value)
        {
            if (string.IsNullOrEmpty(value))
                return string.Empty;

            return $"<{fieldName}:{value.Length}>{value} ";
        }

        private static string MapFrequencyToBand(string? frequencyOrBand)
        {
            if (string.IsNullOrEmpty(frequencyOrBand)) return "";
            var fob = frequencyOrBand.ToLower().Trim();

            // Direct band match
            var knownBands = new[] { "160m", "80m", "60m", "40m", "30m", "20m", "17m", "15m", "12m", "10m", "6m", "4m", "2m", "1.25m", "70cm", "33cm", "23cm", "13cm" };
            if (knownBands.Contains(fob)) return fob;

            // Frequency to band mapping
            if (double.TryParse(fob, out var freqMHz))
            {
                if (freqMHz >= 1.8 && freqMHz <= 2.0) return "160m";
                if (freqMHz >= 3.5 && freqMHz <= 4.0) return "80m";
                if (freqMHz >= 5.06 && freqMHz <= 5.45) return "60m";
                if (freqMHz >= 7.0 && freqMHz <= 7.3) return "40m";
                if (freqMHz >= 10.1 && freqMHz <= 10.15) return "30m";
                if (freqMHz >= 14.0 && freqMHz <= 14.35) return "20m";
                if (freqMHz >= 18.068 && freqMHz <= 18.168) return "17m";
                if (freqMHz >= 21.0 && freqMHz <= 21.45) return "15m";
                if (freqMHz >= 24.89 && freqMHz <= 24.99) return "12m";
                if (freqMHz >= 28.0 && freqMHz <= 29.7) return "10m";
                if (freqMHz >= 50 && freqMHz <= 54) return "6m";
                if (freqMHz >= 144 && freqMHz <= 148) return "2m";
                if (freqMHz >= 222 && freqMHz <= 225) return "1.25m";
                if (freqMHz >= 420 && freqMHz <= 450) return "70cm";
            }

            return ""; // Not a recognized band or valid frequency
        }
    }
}

